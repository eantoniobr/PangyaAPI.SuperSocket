using System;
using System.Collections.Generic;
using System.Linq;
using System.Net.Sockets;
using System.Threading;
using PangyaAPI.SuperSocket.Interface;
using PangyaAPI.Utilities;
using static System.Collections.Specialized.BitVector32;

namespace PangyaAPI.SuperSocket.SocketBase
{
    public class AppSessionManager
    {
        private static uint m_count = 0u;
        private static bool m_is_init = false;
        private object m_cs = new object(); // Use object for locking in C#
        private List<AppSession> m_sessions = new List<AppSession>();

        private const int STDA_TIME_LIMIT_NON_AUTHORIZED = 60000; // Example value, adjust as needed
        private double m_TTL; // You might need to adjust the type based on its usage

        private List<AppSession> m_sessionsDel = new List<AppSession>();
        private int m_max_session;
        public AppSessionManager(int maxSession)
        {
            m_max_session = maxSession;
            m_TTL = 0;

            // Load config from server.ini
            ConfigInit();

            m_is_init = true;

            for (int i = 0; i < maxSession; i++)
            {
                Add(new AppSession());
            }
        }

        protected void Add(AppSession appSession)
        {
            m_sessions.Add(appSession);
        }

        public void Clear()
        {
            lock (m_cs)
            {
                m_sessionsDel.Clear();
                foreach (var session in m_sessions)
                {
                    if (session != null)
                    {
                        session.Dispose();
                    }
                }
                m_sessions.Clear();
            }
        }


        internal TAppSession AddSession<TAppSession, TRequestInfo>(AppSession<TAppSession, TRequestInfo> appSession)
            where TAppSession : AppSession<TAppSession, TRequestInfo>, IAppSession, new()
            where TRequestInfo : class, IRequestInfo
        {
            if (appSession == null)
                throw new Exception("[session_manager::addSession][ERR_SESSION] appSession is invalid.");


            var pSession = appSession;
            lock (m_cs)
            {
                uint index = FindSessionFree();
                if (index == uint.MaxValue)
                {
                    throw new Exception("[session_manager::addSession][ERR_SESSION] already goal limit session estabilized.");
                }

                pSession.SetOID(index);
                pSession.SetTimeStartAndTick(Environment.TickCount);
                m_sessions[(int)index] = pSession;
                m_count++;
            }

            return pSession as IAppSession;
        }
        public IAppSession AddSession(AppSession appSession)
        {
            
        }

        public void CheckSessionLive()
        {
            Thread t2 = new Thread(new ThreadStart(() =>
            {
                double currentTime = (double)DateTime.Now.Ticks / TimeSpan.TicksPerSecond;

                foreach (var el in m_sessions)
                {
                    if (el.m_sock != null)
                    {
                        int connTime = el.GetConnectTime();
                        if (connTime < 0)
                        {
                            m_sessionsDel.Add(el);
                        }
                        else if (!el.m_is_authorized && (currentTime - el.m_time_start) > (STDA_TIME_LIMIT_NON_AUTHORIZED / 1000.0))
                        {
                            m_sessionsDel.Add(el);
                        }
                        else if (m_TTL > 0 && (currentTime - el.m_tick) > (m_TTL / 1000.0))
                        {
                            m_sessionsDel.Add(el);
                        }
                    }
                }
            }));

            t2.Start();
        }
        public virtual bool DeleteSession(AppSession session)
        {
            bool ret = true;

            lock (m_cs)
            {
                int oid = (int)session.m_oid;
                if ((ret = session.Clear()))
                {
                    if (m_count != 0)
                    {
                        m_count--;
                    }
                }
            }

            return ret;
        }

        // Other methods...

        private void ConfigInit()
        {
            // Load config from INI file and set m_TTL
        }

        private uint FindSessionFree()
        {
            for (int i = 0; i < m_max_session; ++i)
            {
                if (m_sessions[i].SocketSession == null)
                {
                    return Convert.ToUInt32(i);
                }
            }
            return uint.MaxValue;
        }


        public uint NumSessionOnline
        {
            get
            {
                uint curr_online = 0;
                lock (m_cs)
                {
                    curr_online = m_count;
                }
                return curr_online;
            }
        }

        public AppSession FindSessionByOID(uint _oid)
        {
            AppSession _session = null;
            lock (m_cs)
            {
                _session = (AppSession)m_sessions.FirstOrDefault(el =>
                {
                    return el.SocketSession != null &&
                           el.m_oid == _oid;
                });
            }
            return _session;
        }

        public AppSession FindSessionByUID(uint _uid)
        {
            AppSession _session = null;
            lock (m_cs)
            {
                _session = (AppSession)m_sessions.FirstOrDefault(el =>
                {
                    return el.SocketSession != null &&
                           el.GetUID() == _uid;
                });
            }
            return _session;
        }

        public List<AppSession> FindAllSessionByUID(uint _uid)
        {
            List<AppSession> v_s = new List<AppSession>();
            lock (m_cs)
            {
                v_s = m_sessions.Where(el =>
                {
                    return el.SocketSession != null &&
                           el.GetUID() == _uid;
                }).ToList();
            }
            return v_s;
        }

        public AppSession FindSessionByNickname(string _nickname)
        {
            AppSession s = null;
            lock (m_cs)
            {
                s = (AppSession)m_sessions.FirstOrDefault(el =>
                {
                    return el.SocketSession != null &&
                           string.Equals(el.GetNickname(), _nickname);
                });
            }
            return s;
        }
        public bool IsFull()
        {
            bool ret = false;
            lock (m_cs)
            {
                ret = m_sessions.Count(session =>
                {
                    return session.SocketSession != null;
                }) == m_sessions.Count;
            }
            return ret;
        }

    }
}
